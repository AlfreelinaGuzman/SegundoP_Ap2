@page "/R_Cobros"

@using BLL
@using Models
@inject IToastService Toast

<EditForm Model="cobros" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="card">
        <div class="card-header">
            <h2>Registro cobros</h2>
        </div>

        <div class="card-body">
            <form>
                

                <div class="form-group row">
                    @*++++++++++++++++++ Id ++++++++++++++++++*@
                    
                    <div class="col form-inline">
                        <label class="col-form-label mr-3">Id </label>
                        <InputNumber @bind-Value="cobros.CobroId" class="form-control" min="0" />

                          @*——————————————————————————————————————————————[ BUSCAR ]——————————————————————————————————————————————*@
                            <div class="input-group-append">
                                <button type="button" class="btn btn-primary input-group-text" height="8" widht="2" @onclick="Buscar">Buscar</button>
                            </div>
                    </div>
                   

                    <div class="col form-inline">
                       
                        <label class="col-form-label mr-3">Clientes</label>
                        <select class="custom-select form-control" @bind="ClienteIndex">
                            <option value="0">Seleccionar</option>
                            @if (Clientes != null)
                            {
                        @foreach (var cliente in Clientes)
                        {
                        <option value="@cliente.ClienteId">@cliente.Nombres</option>
                        }}
                        </select>
                        @if (ClienteIndex != _ClienteIndex)
                        {
                            Cliente_InputChanged();
                        }
                        

                            <label class="col-form-label mr-3">    Fecha</label>
                            <InputDate @bind-Value="cobros.Fecha" class="form-control col-4" />
                            <ValidationMessage For="@(() => cobros.Fecha)" />
                        
                        
                    </div>
                     

                </div>

                <div class="overflow-auto">
                    <h5>Facturas pendientes</h5>
                    <table class="table table-hover">
                        <thead class="thead-light">
                            <tr>
                                <th>Id</th>
                                <th>Fecha</th>
                                <th>Monto</th>
                                <th>Balance</th>
                                <th>Cobrado</th>
                                <th>Pagar</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < VentasPendientes.Count; i++)
                            {
                                Ventas ventas = VentasPendientes[i];
            <tr>
                <td>@ventas.VentaId</td>
                <td>@ventas.Fecha</td>
                <td>@ventas.Monto</td>
                <td>@ventas.Balance</td>
                <td>@ObtenerMontoCobro(ventas)</td>
                <td><input type="checkbox" disabled="@(!ventas.Pendiente)" checked="@(Seleccionado(ventas))" @onchange="()=> Pagar(ventas)" /></td>
            </tr>}
                        </tbody>

                        <tfoot>
                            <tr>
                                <td>Totales</td>
                                <td><input type="text" readonly value="@cobros.Detalle.Where(c => c.CobroDetalleId == 0).Count()" /></td>
                                <td></td>
                                <td></td>
                                <td><input type="text" readonly value="@cobros.ObtenerMonto()" /></td>
                                
                            </tr>
                        </tfoot>
                    </table>
                </div>

                <div class="mt-3">
                    <label>Observaciones</label><br />
                    <InputTextArea style="width:100%" @bind-Value="cobros.Observaciones"></InputTextArea>
                </div>
                <DataAnnotationsValidator />
            </form>
        </div>

        <div class="card-footer text-center">
            <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo"><i class="oi oi-file mr-2" />Nuevo</button>
            <button type="submit" class="btn btn-lg btn-success" style="margin-inline-start: 40px;"><i class="oi oi-account-login" style="transform:rotate(90deg)" /> Guardar</button>
            <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar" style="margin-inline-start: 40px;"><i class="oi oi-trash mr-2" />Eliminar</button>
        </div>
    </div>
</EditForm>



@code
{Cobros cobros = new Cobros();

    public List<Clientes> Clientes { get; set; }
    Clientes ClienteSeleccionado = new Clientes();

    int ClienteIndex = 0;
    int _ClienteIndex = 0;

    public List<Ventas> Ventas { get; set; } = new List<Ventas>();
    public List<Ventas> VentasPendientes { get; set; } = new List<Ventas>();

    protected override async Task OnInitializedAsync()
    {
        Clientes = await ClientesBLL.GetClientes();
        Ventas = await VentasBLL.GetVentas();
    }

    //——————————————————————————————————————————————[ Pagar ]——————————————————————————————————————————————
    void Pagar(Ventas ventas)
    {
        if (ventas.Pendiente)
        {
            CobrosDetalle cobroDetalle = new CobrosDetalle();
            cobroDetalle.VentaId = ventas.VentaId;
            cobroDetalle.Monto = ventas.Balance;

            if (cobros.Detalle.Exists(c => c.VentaId == ventas.VentaId))
            {
                cobros.Detalle.Remove(cobros.Detalle.Find(c => c.VentaId == ventas.VentaId));
            }
            else
            {
                cobros.Detalle.Add(cobroDetalle);
            }
        }
        else
        {
            Toast.ShowInfo("Esta venta ya fue cobrada.");
        }

    }
    //——————————————————————————————————————————————[ ELIMINAR ]——————————————————————————————————————————————
    async Task Eliminar()
    {
        bool eliminado;

        eliminado = await CobrosBLL.Eliminar(cobros.CobroId);

        if (eliminado)
        {
            Nuevo();
            Toast.ShowSuccess("Registro Eliminado exitosamente.");
        }
        else
            Toast.ShowError("No fue posible Eliminar este Registro.");
        return;
    }

    //——————————————————————————————————————————————[ Seleccionado ]——————————————————————————————————————————————
    bool Seleccionado(Ventas ventas)
    {
        if (cobros.Detalle.Exists(c => c.VentaId == ventas.VentaId))
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    //——————————————————————————————————————————————[ ObtenerMontoCobro ]——————————————————————————————————————————————
    decimal ObtenerMontoCobro(Ventas ventas)
    {
        decimal monto = 0;
        if (cobros.Detalle.Exists(c => c.VentaId == ventas.VentaId))
        {
            monto = ventas.Balance;
        }
        else
        {
            monto = 0;
        }
        return monto;
    }

    //——————————————————————————————————————————————[ ObtenerMontoCobro ]——————————————————————————————————————————————
    void Cliente_InputChanged()
    {
        Nuevo();

        if (ClienteIndex > 0)
        {
            ClienteSeleccionado = Clientes.Where(c => c.ClienteId == ClienteIndex).FirstOrDefault();
            VentasPendientes = Ventas.Where(v => v.ClienteId == ClienteSeleccionado.ClienteId && v.Pendiente).ToList();
        }
        else
        {
            VentasPendientes = new List<Ventas>();
        }

        _ClienteIndex = ClienteIndex;
    }

    //——————————————————————————————————————————————[ Nuevo ]——————————————————————————————————————————————
    void Nuevo()
    {
        cobros = new Cobros();
    }

    //——————————————————————————————————————————————[ Actualizar ]——————————————————————————————————————————————
    async Task Actualizar()
    {
        Ventas = await VentasBLL.GetVentas();
        Cliente_InputChanged();
    }

    //——————————————————————————————————————————————[ Guardar ]——————————————————————————————————————————————
    async Task Guardar()
    {
        if (cobros.Detalle.Count > 0)
        {
            cobros.ClienteId = ClienteSeleccionado.ClienteId;
            bool guardo = await CobrosBLL.Guardar(cobros);

            if (guardo)
            {
                Toast.ShowSuccess("Registro Guardado exitosamente.");

                await Actualizar();
            }
            else
                Toast.ShowError("No fue posible Guardar este Registro.");
        }
        else
        {
            Toast.ShowWarning("No fue posible Guardar este Registro.");
        }

    }

    //——————————————————————————————————————————————[ Buscar ]——————————————————————————————————————————————
    async Task Buscar()
    {
        var buscado = await CobrosBLL.Buscar(cobros.CobroId);

        if (buscado != null)
        {
            this.cobros = buscado;
        }
        else
        {
            Toast.ShowWarning("Esta Id no pudo ser encontrada.");
            Nuevo();
        }
    }

    //——————————————————————————————————————————————[ Existe ]——————————————————————————————————————————————
    async Task<bool> Existe()
    {
        var buscado = await CobrosBLL.Buscar(cobros.CobroId);
        return buscado != null;
    } }